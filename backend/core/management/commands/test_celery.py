"""
Django –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Celery –∑–∞–¥–∞—á
"""

from django.core.management.base import BaseCommand
from processing.tasks import debug_task, mock_classify_product
from core.models import HSCode, ProcessingTask, ProductItem
from django.contrib.auth.models import User


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery –∑–∞–¥–∞—á –∏ –º–æ–¥–µ–ª–µ–π'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--test-models',
            action='store_true',
            help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π'
        )
        parser.add_argument(
            '--test-celery',
            action='store_true',
            help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Celery –∑–∞–¥–∞—á–∏'
        )
    
    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI DECLARANT')
        )
        
        if options['test_models']:
            self.test_models()
        
        if options['test_celery']:
            self.test_celery()
        
        if not any([options['test_models'], options['test_celery']]):
            self.test_models()
            self.test_celery()
    
    def test_models(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
        self.stdout.write('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ HS –∫–æ–¥—ã
        test_codes = [
            {'code': '8703.10.00', 'desc': '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ª–µ–≥–∫–æ–≤—ã–µ', 'category': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'},
            {'code': '6203.42.31', 'desc': '–ë—Ä—é–∫–∏ –º—É–∂—Å–∫–∏–µ –∏–∑ —Ö–ª–æ–ø–∫–∞', 'category': '–û–¥–µ–∂–¥–∞'},
            {'code': '0901.11.00', 'desc': '–ö–æ—Ñ–µ –Ω–µ –æ–±–∂–∞—Ä–µ–Ω–Ω—ã–π', 'category': '–ü—Ä–æ–¥—É–∫—Ç—ã'},
        ]
        
        for code_data in test_codes:
            hs_code, created = HSCode.objects.get_or_create(
                code=code_data['code'],
                defaults={
                    'description': code_data['desc'],
                    'category': code_data['category'],
                    'subcategory': '–û–±—â–∞—è –≥—Ä—É–ø–ø–∞'
                }
            )
            if created:
                self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω HS –∫–æ–¥: {hs_code.code}')
            else:
                self.stdout.write(f'  ‚ÑπÔ∏è  HS –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {hs_code.code}')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = User.objects.get_or_create(
            username='testuser',
            defaults={'email': 'test@example.com', 'first_name': 'Test'}
        )
        if created:
            self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
        task, created = ProcessingTask.objects.get_or_create(
            user=user,
            file_name='test_file.xlsx',
            defaults={
                'file_path': '/tmp/test_file.xlsx',
                'status': 'pending',
                'total_items': 3
            }
        )
        if created:
            self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task.file_name}')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        test_products = [
            '–ê–≤—Ç–æ–º–æ–±–∏–ª—å Toyota Camry 2024',
            '–ë—Ä—é–∫–∏ –º—É–∂—Å–∫–∏–µ –¥–∂–∏–Ω—Å–æ–≤—ã–µ —Å–∏–Ω–∏–µ',
            '–ö–æ—Ñ–µ –≤ –∑–µ—Ä–Ω–∞—Ö –∞—Ä–∞–±–∏–∫–∞ –≠—Ñ–∏–æ–ø–∏—è'
        ]
        
        for i, product_desc in enumerate(test_products, 1):
            product, created = ProductItem.objects.get_or_create(
                task=task,
                row_number=i,
                defaults={
                    'original_description': product_desc,
                    'quantity': f'{i * 10}',
                    'unit': '—à—Ç'
                }
            )
            if created:
                self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç {i}: {product_desc[:30]}...')
        
        self.stdout.write(
            self.style.SUCCESS(f'üìä –í—Å–µ–≥–æ HS –∫–æ–¥–æ–≤: {HSCode.objects.count()}')
        )
        self.stdout.write(
            self.style.SUCCESS(f'üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {ProcessingTask.objects.count()}')
        )
        self.stdout.write(
            self.style.SUCCESS(f'üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {ProductItem.objects.count()}')
        )
    
    def test_celery(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery –∑–∞–¥–∞—á"""
        self.stdout.write('\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery...')
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            test_descriptions = [
                '–ê–≤—Ç–æ–º–æ–±–∏–ª—å Toyota Camry 2024',
                '–ë—Ä—é–∫–∏ –º—É–∂—Å–∫–∏–µ –¥–∂–∏–Ω—Å–æ–≤—ã–µ',
                '–ù–æ—É—Ç–±—É–∫ HP Pavilion 15'
            ]
            
            for desc in test_descriptions:
                result = mock_classify_product(desc)
                self.stdout.write(
                    f'  ü§ñ "{desc[:30]}..." ‚Üí {result["hs_code"].code} '
                    f'(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result["confidence"]:.2f})'
                )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ Celery (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            try:
                from celery import current_app
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Celery worker
                inspect = current_app.control.inspect()
                stats = inspect.stats()
                
                if stats:
                    self.stdout.write('  ‚úÖ Celery worker –∞–∫—Ç–∏–≤–µ–Ω')
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∑–∞–¥–∞—á—É
                    result = debug_task.delay()
                    self.stdout.write(f'  üîÑ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞: {result.id}')
                else:
                    self.stdout.write(
                        self.style.WARNING('  ‚ö†Ô∏è  Celery worker –Ω–µ –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç')
                    )
            
            except Exception as e:
                self.stdout.write(
                    self.style.WARNING(f'  ‚ö†Ô∏è  Celery –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}')
                )
        
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Celery: {e}')
            ) 