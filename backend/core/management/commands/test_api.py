"""
Django –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints
"""

from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from core.models import HSCode, ProcessingTask, ProductItem
import requests
import json


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints AI DECLARANT'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--base-url',
            default='http://127.0.0.1:8000',
            help='–ë–∞–∑–æ–≤—ã–π URL API'
        )
        parser.add_argument(
            '--test-auth',
            action='store_true',
            help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é'
        )
    
    def handle(self, *args, **options):
        base_url = options['base_url']
        
        self.stdout.write(
            self.style.SUCCESS('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints AI DECLARANT')
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
        self.test_health_endpoints(base_url)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º HS –∫–æ–¥—ã API
        self.test_hs_codes_api(base_url)
        
        if options['test_auth']:
            self.test_authentication(base_url)
    
    def test_health_endpoints(self, base_url):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check endpoints"""
        self.stdout.write('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Health Check endpoints...')
        
        endpoints = [
            '/api/health/',
            '/api/ready/',
            '/api/live/'
        ]
        
        for endpoint in endpoints:
            try:
                response = requests.get(f'{base_url}{endpoint}', timeout=5)
                status_color = self.style.SUCCESS if response.status_code == 200 else self.style.WARNING
                
                self.stdout.write(
                    f'  {status_color(endpoint)} - {response.status_code}'
                )
                
                if endpoint == '/api/health/':
                    data = response.json()
                    self.stdout.write(f'    –°—Ç–∞—Ç—É—Å: {data.get("status")}')
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                    for component, status in data.get('components', {}).items():
                        comp_status = status.get('status', 'unknown')
                        color = self.style.SUCCESS if comp_status == 'healthy' else self.style.WARNING
                        self.stdout.write(f'    {color(component)}: {comp_status}')
                
            except requests.RequestException as e:
                self.stdout.write(
                    self.style.ERROR(f'  {endpoint} - –û–®–ò–ë–ö–ê: {e}')
                )
    
    def test_hs_codes_api(self, base_url):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HS –∫–æ–¥—ã API"""
        self.stdout.write('\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HS –∫–æ–¥—ã API...')
        
        # 1. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö HS –∫–æ–¥–æ–≤
        try:
            response = requests.get(f'{base_url}/api/hs-codes/')
            if response.status_code == 200:
                data = response.json()
                count = data.get('count', 0)
                self.stdout.write(
                    self.style.SUCCESS(f'  ‚úÖ –°–ø–∏—Å–æ–∫ HS –∫–æ–¥–æ–≤: {count} –∑–∞–ø–∏—Å–µ–π')
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤
                for item in data.get('results', [])[:3]:
                    self.stdout.write(f'    {item["code"]} - {item["description"][:50]}...')
            else:
                self.stdout.write(
                    self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code}')
                )
        except requests.RequestException as e:
            self.stdout.write(self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}'))
        
        # 2. –ü–æ–∏—Å–∫ HS –∫–æ–¥–æ–≤
        search_queries = ['8703', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–±—Ä—é–∫–∏']
        
        for query in search_queries:
            try:
                response = requests.get(f'{base_url}/api/hs-codes/search/', params={'q': query})
                if response.status_code == 200:
                    data = response.json()
                    results_count = len(data.get('results', []))
                    self.stdout.write(
                        self.style.SUCCESS(f'  üîç –ü–æ–∏—Å–∫ "{query}": {results_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
                    )
                else:
                    self.stdout.write(
                        self.style.WARNING(f'  ‚ö†Ô∏è  –ü–æ–∏—Å–∫ "{query}": –∫–æ–¥ {response.status_code}')
                    )
            except requests.RequestException as e:
                self.stdout.write(self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ "{query}": {e}'))
        
        # 3. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        try:
            response = requests.get(f'{base_url}/api/hs-codes/categories/')
            if response.status_code == 200:
                data = response.json()
                categories = data.get('categories', [])
                self.stdout.write(
                    self.style.SUCCESS(f'  üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(categories)} —à—Ç.')
                )
                for category in categories:
                    self.stdout.write(f'    - {category}')
            else:
                self.stdout.write(
                    self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status_code}')
                )
        except requests.RequestException as e:
            self.stdout.write(self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}'))
    
    def test_authentication(self, base_url):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        self.stdout.write('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...')
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É endpoint –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        try:
            response = requests.get(f'{base_url}/api/tasks/')
            
            if response.status_code == 401:
                self.stdout.write(
                    self.style.SUCCESS('  ‚úÖ –ó–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: 401 Unauthorized')
                )
            elif response.status_code == 403:
                self.stdout.write(
                    self.style.SUCCESS('  ‚úÖ –ó–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: 403 Forbidden')
                )
            else:
                self.stdout.write(
                    self.style.WARNING(f'  ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.status_code}')
                )
        except requests.RequestException as e:
            self.stdout.write(self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}'))
        
        self.stdout.write('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:')
        self.stdout.write(f'  HS –∫–æ–¥–æ–≤: {HSCode.objects.count()}')
        self.stdout.write(f'  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {User.objects.count()}')
        self.stdout.write(f'  –ó–∞–¥–∞—á: {ProcessingTask.objects.count()}')
        self.stdout.write(f'  –ü–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤: {ProductItem.objects.count()}')
        
        self.stdout.write(
            self.style.SUCCESS('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
        ) 