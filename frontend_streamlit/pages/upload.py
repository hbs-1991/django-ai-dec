"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
"""

import streamlit as st
import pandas as pd
from utils.api_client import APIClient
from utils.file_utils import validate_file, get_file_preview
import time

def show():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    
    st.header("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel –∏–ª–∏ CSV —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è HS –∫–æ–¥–æ–≤")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    with st.expander("üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É", expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **üìÑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
            - Excel (.xlsx, .xls)
            - CSV (.csv)
            
            **üìè –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
            - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 MB
            - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: 1000
            """)
        
        with col2:
            st.markdown("""
            **üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:**
            - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            - –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            
            **üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):**
            - –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
            - –°—Ç–æ–∏–º–æ—Å—Ç—å
            """)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞",
        type=['xlsx', 'xls', 'csv'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è Excel –∏ CSV —Ñ–∞–π–ª—ã —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 10 MB"
    )
    
    if uploaded_file is not None:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        validation_result = validate_file(uploaded_file)
        
        if validation_result['valid']:
            st.success(f"‚úÖ –§–∞–π–ª '{uploaded_file.name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞", f"{uploaded_file.size / 1024:.1f} KB")
            
            with col2:
                st.metric("üìã –¢–∏–ø —Ñ–∞–π–ª–∞", uploaded_file.type)
            
            with col3:
                if validation_result.get('rows'):
                    st.metric("üìä –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö", validation_result['rows'])
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            st.subheader("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
            
            try:
                preview_df = get_file_preview(uploaded_file)
                if preview_df is not None and not preview_df.empty:
                    st.dataframe(
                        preview_df.head(10),
                        use_container_width=True,
                        hide_index=True
                    )
                    
                    if len(preview_df) > 10:
                        st.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –∏–∑ {len(preview_df)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
                    st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–Ω–æ–∫")
                    analyze_columns(preview_df)
                    
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç")
                    return
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                return
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            col1, col2 = st.columns(2)
            
            with col1:
                auto_approve = st.checkbox(
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∫–æ–¥—ã —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (>90%)",
                    value=True,
                    help="–ö–æ–¥—ã —Å confidence score –≤—ã—à–µ 90% –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã"
                )
            
            with col2:
                email_notification = st.checkbox(
                    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏",
                    value=False,
                    help="–ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email –∫–æ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è"
                )
            
            # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            st.markdown("---")
            
            col1, col2, col3 = st.columns([1, 2, 1])
            
            with col2:
                if st.button(
                    "üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É",
                    type="primary",
                    use_container_width=True,
                    help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ AI DECLARANT"
                ):
                    process_file(uploaded_file, auto_approve, email_notification)
        
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            st.error("‚ùå –§–∞–π–ª –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é:")
            for error in validation_result['errors']:
                st.error(f"‚Ä¢ {error}")
    
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        show_file_examples()

def analyze_columns(df):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–Ω–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    
    columns = df.columns.tolist()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –∫–æ–ª–æ–Ω–æ–∫
    required_cols = {
        'name': [],
        'quantity': [],
        'unit': []
    }
    
    optional_cols = {
        'country': [],
        'price': [],
        'description': []
    }
    
    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
    for col in columns:
        col_lower = col.lower().strip()
        
        # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        if any(word in col_lower for word in ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '—Ç–æ–≤–∞—Ä', '–ø—Ä–æ–¥—É–∫—Ç', 'name', 'product']):
            required_cols['name'].append(col)
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        elif any(word in col_lower for word in ['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'qty', 'quantity', '–∫–æ–ª-–≤–æ']):
            required_cols['quantity'].append(col)
        # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        elif any(word in col_lower for word in ['–µ–¥–∏–Ω–∏—Ü–∞', '–µ–¥', 'unit', '–º–µ—Ä–∞']):
            required_cols['unit'].append(col)
        # –°—Ç—Ä–∞–Ω–∞
        elif any(word in col_lower for word in ['—Å—Ç—Ä–∞–Ω–∞', 'country', '–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ']):
            optional_cols['country'].append(col)
        # –¶–µ–Ω–∞
        elif any(word in col_lower for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', 'price', 'cost']):
            optional_cols['price'].append(col)
        # –û–ø–∏—Å–∞–Ω–∏–µ
        elif any(word in col_lower for word in ['–æ–ø–∏—Å–∞–Ω–∏–µ', 'description', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']):
            optional_cols['description'].append(col)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üî¥ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:**")
        for field, cols in required_cols.items():
            status = "‚úÖ" if cols else "‚ùå"
            field_name = {
                'name': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                'quantity': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                'unit': '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è'
            }[field]
            
            if cols:
                st.success(f"{status} {field_name}: {', '.join(cols)}")
            else:
                st.error(f"{status} {field_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    with col2:
        st.markdown("**üü° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:**")
        for field, cols in optional_cols.items():
            if cols:
                field_name = {
                    'country': '–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è',
                    'price': '–¶–µ–Ω–∞/—Å—Ç–æ–∏–º–æ—Å—Ç—å',
                    'description': '–û–ø–∏—Å–∞–Ω–∏–µ'
                }[field]
                st.info(f"‚úÖ {field_name}: {', '.join(cols)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞–π–¥–µ–Ω—ã
    missing_required = [field for field, cols in required_cols.items() if not cols]
    
    if missing_required:
        st.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏. –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        st.success("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞–π–¥–µ–Ω—ã!")

def process_file(uploaded_file, auto_approve, email_notification):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    try:
        status_text.text("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        progress_bar.progress(25)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API
        api = APIClient()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–∞–π–ª–∞ –≤ –Ω–∞—á–∞–ª–æ
        uploaded_file.seek(0)
        
        result = api.upload_file(uploaded_file)
        
        if result:
            task_id = result.get('id')
            progress_bar.progress(50)
            status_text.text(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ó–∞–¥–∞—á–∞ #{task_id} —Å–æ–∑–¥–∞–Ω–∞")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Å–µ—Å—Å–∏–∏
            if 'uploaded_tasks' not in st.session_state:
                st.session_state.uploaded_tasks = []
            
            st.session_state.uploaded_tasks.append({
                'id': task_id,
                'filename': uploaded_file.name,
                'created_at': result.get('created_at'),
                'auto_approve': auto_approve,
                'email_notification': email_notification
            })
            
            progress_bar.progress(100)
            status_text.text("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ø–µ—Ö–µ
            st.success(f"""
            ‚úÖ **–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!**
            
            **–ó–∞–¥–∞—á–∞ ID:** {task_id}  
            **–§–∞–π–ª:** {uploaded_file.name}  
            **–°—Ç–∞—Ç—É—Å:** –í –æ–±—Ä–∞–±–æ—Ç–∫–µ  
            
            –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "üìä –ú–æ–∏ –∑–∞–¥–∞—á–∏"
            """)
            
            # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞–¥–∞—á–∞–º
            if st.button("üìä –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–∞–º", type="secondary"):
                st.session_state.page = "üìä –ú–æ–∏ –∑–∞–¥–∞—á–∏"
                st.rerun()
        
        else:
            progress_bar.progress(0)
            status_text.text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.")
    
    except Exception as e:
        progress_bar.progress(0)
        status_text.text("‚ùå –û—à–∏–±–∫–∞")
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

def show_file_examples():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    
    st.markdown("---")
    st.subheader("üìù –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤")
    
    # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Excel —Ñ–∞–π–ª–∞
    example_data = {
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': [
            '–ê–≤—Ç–æ–º–æ–±–∏–ª—å –ª–µ–≥–∫–æ–≤–æ–π Toyota Camry',
            '–ö–æ—Ñ–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –≤ –∑–µ—Ä–Ω–∞—Ö',
            '–ë—Ä—é–∫–∏ –º—É–∂—Å–∫–∏–µ –¥–∂–∏–Ω—Å–æ–≤—ã–µ',
            '–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–æ—É—Ç–±—É–∫ ASUS'
        ],
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [1, 50, 10, 2],
        '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è': ['—à—Ç', '–∫–≥', '—à—Ç', '—à—Ç'],
        '–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è': ['–Ø–ø–æ–Ω–∏—è', '–ë—Ä–∞–∑–∏–ª–∏—è', '–¢—É—Ä—Ü–∏—è', '–ö–∏—Ç–∞–π'],
        '–°—Ç–æ–∏–º–æ—Å—Ç—å (USD)': [25000, 500, 300, 800]
    }
    
    example_df = pd.DataFrame(example_data)
    
    st.markdown("**–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞:**")
    st.dataframe(example_df, use_container_width=True, hide_index=True)
    
    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞
    csv_data = example_df.to_csv(index=False, encoding='utf-8-sig')
    
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä CSV",
        data=csv_data,
        file_name="example_products.csv",
        mime="text/csv",
        help="–°–∫–∞—á–∞–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–∞–∫ —à–∞–±–ª–æ–Ω –¥–ª—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
    ) 