"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""

import streamlit as st
import pandas as pd
from utils.api_client import APIClient
from datetime import datetime
import time

def show():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á"""
    
    st.header("üìä –ú–æ–∏ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    st.markdown("–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤")
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2, col3 = st.columns([1, 1, 2])
    
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
            st.rerun()
    
    with col2:
        auto_refresh = st.checkbox("‚ö° –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=False)
    
    if auto_refresh:
        # –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        time.sleep(5)
        st.rerun()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    api = APIClient()
    tasks = get_user_tasks(api)
    
    if not tasks:
        show_empty_state()
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
    show_tasks_summary(tasks)
    
    # –§–∏–ª—å—Ç—Ä—ã
    st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        status_filter = st.selectbox(
            "–°—Ç–∞—Ç—É—Å:",
            options=["–í—Å–µ", "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–ó–∞–≤–µ—Ä—à–µ–Ω—ã", "–û—à–∏–±–∫–∏", "–û—Ç–º–µ–Ω–µ–Ω—ã"],
            index=0
        )
    
    with col2:
        period_filter = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥:",
            options=["–í—Å–µ –≤—Ä–µ–º—è", "–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü"],
            index=0
        )
    
    with col3:
        sort_by = st.selectbox(
            "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:",
            options=["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ)", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ)", "–°—Ç–∞—Ç—É—Å", "–ò–º—è —Ñ–∞–π–ª–∞"],
            index=0
        )
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_tasks = apply_filters(tasks, status_filter, period_filter, sort_by)
    
    st.markdown("---")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
    if filtered_tasks:
        st.subheader(f"üìã –ó–∞–¥–∞—á–∏ ({len(filtered_tasks)})")
        
        for task in filtered_tasks:
            show_task_card(task, api)
    else:
        st.info("–ù–µ—Ç –∑–∞–¥–∞—á, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")

def get_user_tasks(api: APIClient):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        tasks = api.get_user_tasks()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if 'uploaded_tasks' in st.session_state:
            local_tasks = st.session_state.uploaded_tasks
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
            for local_task in local_tasks:
                task_status = api.get_task_status(local_task['id'])
                if task_status:
                    local_task.update(task_status)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
            local_ids = {task['id'] for task in local_tasks}
            for task in tasks:
                if task['id'] not in local_ids:
                    local_tasks.append(task)
            
            return local_tasks
        
        return tasks
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        return []

def show_tasks_summary(tasks):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º"""
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_tasks = len(tasks)
    pending_tasks = len([t for t in tasks if t.get('status') == 'pending'])
    processing_tasks = len([t for t in tasks if t.get('status') == 'processing'])
    completed_tasks = len([t for t in tasks if t.get('status') == 'completed'])
    failed_tasks = len([t for t in tasks if t.get('status') == 'failed'])
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á", total_tasks)
    
    with col2:
        st.metric("‚è≥ –û–∂–∏–¥–∞—é—Ç", pending_tasks, help="–ó–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
    
    with col3:
        st.metric("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è", processing_tasks, help="–ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    with col4:
        st.metric("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ã", completed_tasks, help="–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
    
    with col5:
        st.metric("‚ùå –û—à–∏–±–∫–∏", failed_tasks, help="–ó–∞–¥–∞—á–∏ —Å –æ—à–∏–±–∫–∞–º–∏")

def show_task_card(task, api: APIClient):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ü–≤–µ—Ç
    status = task.get('status', 'unknown')
    status_config = get_status_config(status)
    
    with st.container():
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
        col1, col2, col3 = st.columns([3, 1, 1])
        
        with col1:
            st.markdown(f"**üìÑ {task.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')}**")
            st.caption(f"ID: {task.get('id')} ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {format_datetime(task.get('created_at'))}")
        
        with col2:
            st.markdown(f"**{status_config['icon']} {status_config['text']}**")
        
        with col3:
            if status in ['processing', 'pending']:
                if st.button("‚èπÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", key=f"cancel_{task.get('id')}", help="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"):
                    cancel_task(task.get('id'), api)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if status == 'processing':
            progress = task.get('progress_percent', 0) / 100.0
            st.progress(progress)
            
            # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            total_items = task.get('total_items', 0)
            processed_items = task.get('processed_items', 0)
            
            if total_items > 0:
                st.caption(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_items} –∏–∑ {total_items} –ø–æ–∑–∏—Ü–∏–π ({task.get('progress_percent', 0):.1f}%)")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ
        if status == 'completed':
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                if task.get('total_items'):
                    st.metric("üìä –ü–æ–∑–∏—Ü–∏–π", task['total_items'])
            
            with col2:
                if st.button("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", key=f"view_{task.get('id')}"):
                    st.session_state.selected_task = task.get('id')
                    st.session_state.page = "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
                    st.rerun()
            
            with col3:
                if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç", key=f"export_{task.get('id')}"):
                    export_task_results(task.get('id'), api)
        
        elif status == 'failed':
            error_msg = task.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            st.error(f"–û—à–∏–±–∫–∞: {error_msg}")
            
            if st.button("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", key=f"retry_{task.get('id')}"):
                st.info("–§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")
        
        st.markdown("---")

def apply_filters(tasks, status_filter, period_filter, sort_by):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á"""
    
    filtered_tasks = tasks.copy()
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if status_filter != "–í—Å–µ":
        status_map = {
            "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ": ["pending", "processing"],
            "–ó–∞–≤–µ—Ä—à–µ–Ω—ã": ["completed"],
            "–û—à–∏–±–∫–∏": ["failed"],
            "–û—Ç–º–µ–Ω–µ–Ω—ã": ["cancelled"]
        }
        
        allowed_statuses = status_map.get(status_filter, [])
        filtered_tasks = [t for t in filtered_tasks if t.get('status') in allowed_statuses]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–µ
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sort_by == "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ)":
        filtered_tasks.sort(key=lambda x: x.get('created_at', ''), reverse=True)
    elif sort_by == "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ)":
        filtered_tasks.sort(key=lambda x: x.get('created_at', ''))
    elif sort_by == "–°—Ç–∞—Ç—É—Å":
        filtered_tasks.sort(key=lambda x: x.get('status', ''))
    elif sort_by == "–ò–º—è —Ñ–∞–π–ª–∞":
        filtered_tasks.sort(key=lambda x: x.get('file_name', ''))
    
    return filtered_tasks

def get_status_config(status):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    
    config_map = {
        'pending': {'icon': '‚è≥', 'text': '–û–∂–∏–¥–∞–µ—Ç', 'color': 'orange'},
        'processing': {'icon': 'üîÑ', 'text': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è', 'color': 'blue'},
        'completed': {'icon': '‚úÖ', 'text': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', 'color': 'green'},
        'failed': {'icon': '‚ùå', 'text': '–û—à–∏–±–∫–∞', 'color': 'red'},
        'cancelled': {'icon': '‚èπÔ∏è', 'text': '–û—Ç–º–µ–Ω–µ–Ω–æ', 'color': 'gray'}
    }
    
    return config_map.get(status, {'icon': '‚ùì', 'text': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'color': 'gray'})

def format_datetime(datetime_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    if not datetime_str:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º)
        if 'T' in datetime_str:
            dt = datetime.fromisoformat(datetime_str.replace('Z', '+00:00'))
        else:
            dt = datetime.strptime(datetime_str, '%Y-%m-%d %H:%M:%S')
        
        return dt.strftime('%d.%m.%Y %H:%M')
    except:
        return datetime_str

def cancel_task(task_id, api: APIClient):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏"""
    try:
        success = api.post(f'/tasks/{task_id}/cancel/')
        if success:
            st.success("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            st.rerun()
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏: {e}")

def export_task_results(task_id, api: APIClient):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞—á–∏"""
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç
        st.info("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")

def show_empty_state():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–≥–¥–∞ –Ω–µ—Ç –∑–∞–¥–∞—á"""
    
    st.markdown("---")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("""
        ### üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á
        
        –ù–∞—á–Ω–∏—Ç–µ —Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ Excel –∏–ª–∏ CSV —Å —Ç–æ–≤–∞—Ä–∞–º–∏ 
        –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è HS –∫–æ–¥–æ–≤.
        """)
        
        if st.button("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", type="primary", use_container_width=True):
            st.session_state.page = "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤"
            st.rerun()
        
        st.markdown("---")
        
        st.markdown("""
        **üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:**
        - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã .xlsx, .xls, .csv
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10 MB
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: 1000
        """) 