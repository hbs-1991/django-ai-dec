"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è Streamlit
"""

import streamlit as st
import hashlib
import hmac
from typing import Optional

def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

def verify_password(password: str, hashed: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    return hmac.compare_digest(hash_password(password), hashed)

def get_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    return {
        'admin': {
            'password_hash': hash_password('admin123'),
            'name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'role': 'admin'
        },
        'user': {
            'password_hash': hash_password('user123'),
            'name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'role': 'user'
        },
        'demo': {
            'password_hash': hash_password('demo'),
            'name': '–î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'role': 'demo'
        }
    }

def authenticate(username: str, password: str) -> Optional[dict]:
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password: –ü–∞—Ä–æ–ª—å
        
    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ None
    """
    users = get_users()
    
    if username in users:
        user = users[username]
        if verify_password(password, user['password_hash']):
            return {
                'username': username,
                'name': user['name'],
                'role': user['role']
            }
    
    return None

def login(username: str, password: str) -> bool:
    """
    –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    
    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password: –ü–∞—Ä–æ–ª—å
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
    """
    user = authenticate(username, password)
    
    if user:
        st.session_state.authenticated = True
        st.session_state.user = user
        st.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['name']}!")
        return True
    else:
        st.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        return False

def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    st.session_state.authenticated = False
    st.session_state.user = None
    if 'auth_token' in st.session_state:
        del st.session_state.auth_token
    st.success("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")

def get_current_user() -> Optional[dict]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ None
    """
    if st.session_state.get('authenticated', False):
        return st.session_state.get('user')
    return None

def is_authenticated() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    return st.session_state.get('authenticated', False)

def require_auth():
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if not is_authenticated():
        show_login_form()
        return False
    return True

def show_login_form():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞"""
    
    st.markdown("---")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.subheader("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        
        with st.form("login_form"):
            username = st.text_input("üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            password = st.text_input("üîë –ü–∞—Ä–æ–ª—å", type="password")
            
            col1, col2 = st.columns(2)
            
            with col1:
                login_button = st.form_submit_button("üöÄ –í–æ–π—Ç–∏", use_container_width=True)
            
            with col2:
                demo_button = st.form_submit_button("üëÄ –î–µ–º–æ —Ä–µ–∂–∏–º", use_container_width=True)
            
            if login_button and username and password:
                if login(username, password):
                    st.rerun()
            
            elif demo_button:
                if login('demo', 'demo'):
                    st.rerun()
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞
        with st.expander("üí° –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã", expanded=False):
            st.markdown("""
            **–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**
            
            **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:**
            - –õ–æ–≥–∏–Ω: `admin`
            - –ü–∞—Ä–æ–ª—å: `admin123`
            
            **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**
            - –õ–æ–≥–∏–Ω: `user`  
            - –ü–∞—Ä–æ–ª—å: `user123`
            
            **–î–µ–º–æ —Ä–µ–∂–∏–º:**
            - –õ–æ–≥–∏–Ω: `demo`
            - –ü–∞—Ä–æ–ª—å: `demo`
            """)

def show_user_info():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    
    user = get_current_user()
    if not user:
        return
    
    with st.sidebar:
        st.markdown("---")
        st.subheader("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        st.write(f"**–ò–º—è:** {user['name']}")
        st.write(f"**–†–æ–ª—å:** {user['role']}")
        st.write(f"**–õ–æ–≥–∏–Ω:** {user['username']}")
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
            logout()
            st.rerun()

def check_permission(required_role: str = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    
    Args:
        required_role: –¢—Ä–µ–±—É–µ–º–∞—è —Ä–æ–ª—å
        
    Returns:
        True –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
    """
    user = get_current_user()
    
    if not user:
        return False
    
    if not required_role:
        return True
    
    user_role = user.get('role', '')
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π
    role_hierarchy = {
        'admin': ['admin', 'user', 'demo'],
        'user': ['user', 'demo'],
        'demo': ['demo']
    }
    
    allowed_roles = role_hierarchy.get(user_role, [])
    return required_role in allowed_roles

def with_auth(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    Args:
        func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        
    Returns:
        –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    def wrapper(*args, **kwargs):
        if require_auth():
            return func(*args, **kwargs)
        return None
    
    return wrapper 